apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: lua-filter
  namespace: demo1
spec:
  workloadSelector:
    labels:
      #istio: ingressgateway
      app: productpage
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.http_connection_manager"
            subFilter:
              name: "envoy.router"
    patch:
      operation: INSERT_BEFORE
      value:
       name: envoy.lua
       typed_config:
         "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
         inlineCode: |
            function version()
                return "v1"
            end
            function log(handle, value)
                handle:logWarn(version() .. ': ' .. value)
            end

            -- dump a lua object into a string for logging
            function dump(o)
              if type(o) == 'table' then
                  local s = '{ '
                  for k,v in pairs(o) do
                    if type(k) ~= 'number' then k = '"'..k..'"' end
                    s = s .. '['..k..'] = ' .. dump(v) .. ','
                  end
                  return s .. '} '
              else
                  return tostring(o)
              end
            end

            function envoy_on_request(request_handle)

                function try(f, catch_f)
                    local status, exception = pcall(f)
                    if not status then
                      catch_f(exception)
                    end
                end
                try(function()
                    local body = request_handle:body()
                    request_handle:logWarn(type(body))

                    local request_body_buffer = request_handle:body()
                    if(request_body_buffer == nil)
                    then
                    -- nil boby
                    else
                      local request_body_data = request_body_buffer:getBytes(0, request_body_buffer:length())
                      request_handle:logWarn(request_body_data) 
                    end

                  end, function(e)
                    request_handle:logWarn("salio mal") 
                    request_handle:logWarn(error(e)) 
                  end)



                log(request_handle, "START DISPLAYING REQUEST HEADERS")
                local log_headers = request_handle:headers()
                for key, value in pairs(log_headers) do
                  log(request_handle,  "header key: " .. dump(key) .. ", header value: " .. dump(value))


                    if(tostring(key) == "x-b3-traceid")
                      then
                        print("==============Trace ID================"..tostring(key).."   "..dump(value) )
                      else
                      
                    end

                    if(tostring(key) == "x-request-id")
                      then
                        request_id = tostring(value)
                        request_id = request_id:gsub("%-", "")
                        request_sub = request_id:sub(1, 16)
                        
                        print("==============request_id================"..tostring(key).."   "..request_sub )
                      else
                      
                    end
                    if(tostring(key) == "date")
                      then
                          s=dump(value)
                          p="%a+, (%d+) (%a+) (%d+) (%d+):(%d+):(%d+) GMT"
                          day,month,year,hour,min,sec=s:match(p)
                          MON={Jan=1,Feb=2,Mar=3,Apr=4,May=5,Jun=6,Jul=7,Aug=8,Sep=9,Oct=10,Nov=11,Dec=12}
                          month=MON[month]
                          offset=os.time()-os.time(os.date("!*t"))
                          print(os.time({day=day,month=month,year=year,hour=hour,min=min,sec=sec})+offset)
                      else
                      
                    end


                end
                log(request_handle, "END DISPLAYING REQUEST HEADERS")
              
                request_handle:headers():add("authorization", "it works!")
                request_handle:logWarn(" ========= Hola ========== ")
            end
            function envoy_on_response(response_handle)
                  log(response_handle, "START DISPLAYING REQUEST HEADERS")
                  local log_headers = response_handle:headers()
                  for key, value in pairs(log_headers) do
                    log(response_handle,  "header key: " .. dump(key) .. ", header value: " .. dump(value))
                  end
                  log(response_handle, "END DISPLAYING REQUEST HEADERS")            
                  filter_name = "Personal"
                  response_handle:headers():add("nuevo_filtro", filter_name)
                  local function is_not_empty(s)
                    return s ~= nil 
                  end
                  local body = response_handle:body()
                  
                  if is_not_empty(body) then
                    result = tostring(body)
                    response_handle:logWarn(result) 
                  end                  
                  response_handle:logWarn(" ========= XXXXX ========== ")
            end