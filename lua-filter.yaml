apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: lua-filter
  namespace: demo1
spec:
  workloadSelector:
    labels:
      #istio: ingressgateway
      app: productpage
  configPatches:
  - applyTo: CLUSTER
    match:
      context: SIDECAR_OUTBOUND
    patch:
      operation: ADD
      value: # cluster specification
        name: "jaeger_cluster"
        type: STRICT_DNS
        connect_timeout: 0.5s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: jaeger_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    protocol: TCP
                    address: "zipkin.istio-system"
                    port_value: 9411
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.http_connection_manager"
            subFilter:
              name: "envoy.router"
    patch:
      operation: INSERT_BEFORE
      value:
       name: envoy.lua
       typed_config:
         "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
         inlineCode: |
            
            local start_time
            function version()
                return "v1"
            end
            function log(handle, value)
                handle:logWarn(version() .. ': ' .. value)
            end

            -- dump a lua object into a string for logging
            function dump(o)
              if type(o) == 'table' then
                  local s = '{ '
                  for k,v in pairs(o) do
                    if type(k) ~= 'number' then k = '"'..k..'"' end
                    s = s .. '['..k..'] = ' .. dump(v) .. ','
                  end
                  return s .. '} '
              else
                  return tostring(o)
              end
            end

            function replace_vars(s, variable_list)
              -- Allow replace_vars{str, vars} syntax as well as replace_vars(str, {vars})
              -- variable_list[x] or variable_list[tonumber(x)] or "{" .. x .. "}"
              if not variable_list then return s end
              local f = function(x)
                return tostring(variable_list[x] or variable_list[tonumber(x)] or "{" .. x .. "}" )
              end
              return (s:gsub("<(.-)>", f))
            end


            function envoy_on_request(request_handle)

                function try(f, catch_f)
                    local status, exception = pcall(f)
                    if not status then
                      catch_f(exception)
                    end
                end
                try(function()



                    start_time = os.clock()


                    local body = request_handle:body()
                    request_handle:logWarn(type(body))

                    local payload_msj

                    request_body_buffer = request_handle:body()
                    if(request_body_buffer == nil)
                    then
                    -- nil boby
                    else
                      payload_msj = request_body_buffer:getBytes(0, request_body_buffer:length())
                      request_handle:logWarn(payload_msj) 
                    end



                    log(request_handle, "START DISPLAYING REQUEST HEADERS")
                    local log_headers = request_handle:headers()
                    for key, value in pairs(log_headers) do
                      log(request_handle,  "header key: " .. dump(key) .. ", header value: " .. dump(value))
    
    
                        if(tostring(key) == "x-b3-traceid")
                          then
                            trace_id = dump(value)
                            print("==============Trace ID================"..tostring(key).."   "..dump(value) )
                          else
                          
                        end
                        if(tostring(key) == "x-b3-spanid")
                          then
                            span_id = dump(value)
                            print("==============SPAN ID================"..tostring(key).."   "..dump(value) )
                          else
                          
                        end
                        if(tostring(key) == "x-request-id")
                          then
                            request_id = tostring(value)
                            request_id = request_id:gsub("%-", "")
                            request_sub = request_id:sub(1, 16)
                            
                            print("==============request_id================"..tostring(key).."   "..request_sub )
                          else
                          
                        end
    
                    end
                    log(request_handle, "END DISPLAYING REQUEST HEADERS")
                    timestamp_micro= os.time().."000000"
                    print("==========  TIME Microseconds =========" .. os.time().."000000")
                    request_handle:headers():add("authorization", "it works!")
                    request_handle:logWarn(" ========= Hola ========== ")
    
                    duration = os.clock()-start_time
                    microsecs= math.floor(duration * 1000000)
                    print("==============Duration================"..duration)
                    print("==============Duration Microseconds ================"..microsecs)       
                    id_number = request_sub
                    print("=========== ID ==============="..id_number)
                    print("=========== Payload ===========".. (payload_msj or "none") )
                    --nonamp_payload= nonquoted_payload:gsub( '\&', "\\&")
                    clean_payload= payload_msj:gsub("\\", "\\\\")
                    nonquoted_payload= clean_payload:gsub( '"', '\\"')
                    --escaped_payload= clean_payload:gsub("[\n]", "\\n")
                    variable_list= {idNumber = id_number,
                          traceId = trace_id,
                          parentId = span_id,
                          timestamp = timestamp_micro , 
                          duration = microsecs, 
                          body = nonquoted_payload } 
    
                    json_span = [[
                      [
                          {
                              "id": "<idNumber>",
                              "traceId": "<traceId>",
                              "parentId": "<parentId>",
                              "name": "payload request",
                              "timestamp": <timestamp>,
                              "duration": <duration>,
                              "kind": "SERVER",
                              "localEndpoint": {
                                  "serviceName": "backend",
                                  "ipv4": "192.168.99.1",
                                  "port": 3306
                              },
                              "remoteEndpoint": {
                                  "ipv4": "172.19.0.2",
                                  "port": 58648
                              },
                              "tags": {
                                  "http.payload": "<body>"
                              }
                          }
                      ]    
                   ]]
    
                    span_info = replace_vars(   json_span, variable_list  )
    
                    print("===========SPAN JSON=============="..dump(span_info))

                    local headers, res = request_handle:httpCall(
                      "jaeger_cluster",
                      {
                       [":method"] = "POST",
                       [":path"] = "/api/v2/spans",
                       [":authority"] = "jaeger_cluster",
                       ["Content-Type"] = "application/json"
                      },
                      span_info,
                     5000)
                      
                     print("== headers=====".. dump(headers))
                     print("== res=====".. dump(res))

                  end, function(e)
                    request_handle:logWarn("salio mal") 
                    request_handle:logWarn(error(e)) 
                  end)






            end
            function envoy_on_response(response_handle)
                  log(response_handle, "START DISPLAYING RESPONSE HEADERS")
                  local log_headers = response_handle:headers()
                  for key, value in pairs(log_headers) do
                    log(response_handle,  "header key: " .. dump(key) .. ", header value: " .. dump(value))

                    if(dump(key) == "date")
                      then
                          s=dump(value)
                          p="%a+, (%d+) (%a+) (%d+) (%d+):(%d+):(%d+) GMT"
                          day,month,year,hour,min,sec=s:match(p)
                          MON={Jan=1,Feb=2,Mar=3,Apr=4,May=5,Jun=6,Jul=7,Aug=8,Sep=9,Oct=10,Nov=11,Dec=12}
                          month=MON[month]
                          offset=os.time()-os.time(os.date("!*t"))
                          print(os.time({day=day,month=month,year=year,hour=hour,min=min,sec=sec})+offset)
                      else
                      
                    end
                  end
                  log(response_handle, "END DISPLAYING RESPONSE HEADERS")            
                  filter_name = "Personal"
                  response_handle:headers():add("nuevo_filtro", filter_name)
                  local function is_not_empty(s)
                    return s ~= nil 
                  end
                  local body = response_handle:body()
                  
                  if is_not_empty(body) then
                    result = tostring(body)
                    response_handle:logWarn(result) 
                  end                  
                  response_handle:logWarn(" ========= XXXXX ========== ")
            end